WEBVTT

1
00:00:00.140 --> 00:00:01.430 line:15% 
<v Jose>Hi, and welcome back.</v>

2
00:00:01.430 --> 00:00:03.090 line:15% 
In this video, we're going to be adding

3
00:00:03.090 --> 00:00:06.273 line:15% 
custom JSON types to our models.

4
00:00:07.410 --> 00:00:10.220
What is a custom JSON type?

5
00:00:10.220 --> 00:00:15.220
Well, we've got ourselves this JSON method in our models

6
00:00:15.690 --> 00:00:17.123
and it returns a dictionary.

7
00:00:18.270 --> 00:00:22.440
What we don't know though, is what sort of values

8
00:00:22.440 --> 00:00:24.610
are stored in the dictionary.

9
00:00:24.610 --> 00:00:28.560
For example, are all the keys strings?

10
00:00:28.560 --> 00:00:32.350
Or are all the values numbers?

11
00:00:32.350 --> 00:00:35.660
We don't really have any information about that

12
00:00:35.660 --> 00:00:40.220
so potentially, somebody could try to get this JSON out

13
00:00:40.220 --> 00:00:43.380
and then access some number key,

14
00:00:43.380 --> 00:00:45.523
say for example, like five, or something.

15
00:00:46.800 --> 00:00:48.900
Of course, that doesn't make sense when you know

16
00:00:48.900 --> 00:00:52.410
what this JSON type is and what it contains,

17
00:00:52.410 --> 00:00:56.510
and particularly for a small method like this one

18
00:00:56.510 --> 00:00:58.820
that is quite clear what it's returning,

19
00:00:58.820 --> 00:01:01.840
it may not be necessary to do what we're about to do

20
00:01:01.840 --> 00:01:03.570
but it's nonetheless a good practise

21
00:01:03.570 --> 00:01:07.750
when you're returning more complex lists and dictionaries.

22
00:01:07.750 --> 00:01:12.490
So, we're going to start by creating our custom JSON type,

23
00:01:12.490 --> 00:01:14.040
and this can also be useful, of course,

24
00:01:14.040 --> 00:01:16.910
when you are having other types of data

25
00:01:16.910 --> 00:01:18.923
that you wanna create custom types for.

26
00:01:19.890 --> 00:01:21.700
So, the first thing we have to do is

27
00:01:21.700 --> 00:01:25.310
go over to our import and from typing,

28
00:01:25.310 --> 00:01:30.310
we're now gonna import Dict, List, and Union, okay?

29
00:01:30.740 --> 00:01:33.350
And then we're gonna ask ourselves the question.

30
00:01:33.350 --> 00:01:38.350
First of all, what are the keys and values

31
00:01:38.490 --> 00:01:39.423
of the dictionary?

32
00:01:40.550 --> 00:01:43.240
We can see the keys are always strings

33
00:01:43.240 --> 00:01:47.080
so we can start by defining a dictionary

34
00:01:47.080 --> 00:01:49.110
that has strings as keys.

35
00:01:49.110 --> 00:01:50.810
So we're gonna say ItemJSON,

36
00:01:50.810 --> 00:01:52.350
this is just the name of our variable, by the way,

37
00:01:52.350 --> 00:01:54.280
you can call it whatever you want.

38
00:01:54.280 --> 00:01:58.450
It's going to be a Dict, and then using square brackets,

39
00:01:58.450 --> 00:02:02.360
important, not normal brackets, using square brackets

40
00:02:02.360 --> 00:02:06.810
we're gonna put str in there, and then a comma,

41
00:02:06.810 --> 00:02:09.190
and then we're gonna put something else here.

42
00:02:09.190 --> 00:02:13.100
The first argument to these Dicts,

43
00:02:13.100 --> 00:02:15.870
or the first thing inside these square brackets,

44
00:02:15.870 --> 00:02:19.050
is the key of the dictionary.

45
00:02:19.050 --> 00:02:23.453
So this says all keys in this dictionary are strings.

46
00:02:24.330 --> 00:02:28.370
Next up, we have to say what the values have

47
00:02:28.370 --> 00:02:32.930
and id is an integer, name is a string,

48
00:02:32.930 --> 00:02:37.250
price is a float, and store_id is an integer.

49
00:02:37.250 --> 00:02:41.150
So what we've got ourselves here is a bit of everything.

50
00:02:41.150 --> 00:02:46.150
We cannot say strings and ints, because this would be a lie.

51
00:02:46.490 --> 00:02:49.470
The name is a string, not an integer.

52
00:02:49.470 --> 00:02:52.473
So, not all values are integers.

53
00:02:53.900 --> 00:02:56.410
What we're gonna do is say Union

54
00:02:56.410 --> 00:02:59.573
and then put int, str, and float.

55
00:03:00.490 --> 00:03:02.240
So now what this means

56
00:03:02.240 --> 00:03:05.800
is this ItemJSON is a dictionary

57
00:03:05.800 --> 00:03:08.620
that has strings as keys

58
00:03:08.620 --> 00:03:13.620
and either ints, strings, or floats as values.

59
00:03:14.930 --> 00:03:18.180
Okay, now we can see that this JSON method

60
00:03:18.180 --> 00:03:20.670
is going to return an ItemJSON

61
00:03:21.860 --> 00:03:23.710
instead of just a dict.

62
00:03:24.560 --> 00:03:27.070
And this gives us a bit more information

63
00:03:27.070 --> 00:03:30.020
about exactly what's gonna come back

64
00:03:30.020 --> 00:03:31.360
particularly to PyCharm

65
00:03:31.360 --> 00:03:34.810
and to any other editor that uses these type hints.

66
00:03:34.810 --> 00:03:39.150
If you try to access a key such as the key number five,

67
00:03:39.150 --> 00:03:41.750
it's gonna give you a warning, saying,

68
00:03:41.750 --> 00:03:46.500
hey, all the keys in this dictionary are strings,

69
00:03:46.500 --> 00:03:48.960
but you've tried to access an integer

70
00:03:48.960 --> 00:03:51.650
and that's probably not gonna work for you.

71
00:03:51.650 --> 00:03:53.750
So, it's just gonna be a bit more helpful

72
00:03:53.750 --> 00:03:55.250
if you do something like this.

73
00:03:56.530 --> 00:04:00.670
Okay, now we can go over to the store model

74
00:04:00.670 --> 00:04:02.710
and we're going to do something very similar

75
00:04:02.710 --> 00:04:05.870
but actually it's going to be even more powerful.

76
00:04:05.870 --> 00:04:09.960
Okay, once again, we're going to import Union at the top.

77
00:04:09.960 --> 00:04:14.150
We'll need that and we're gonna define our StoreJSON,

78
00:04:14.150 --> 00:04:16.660
which is once again going to be a dictionary.

79
00:04:16.660 --> 00:04:19.230
The keys are all strings, so the first element

80
00:04:19.230 --> 00:04:23.800
in this square bracket set is going to be str for string

81
00:04:23.800 --> 00:04:28.390
and the second element is going to be

82
00:04:28.390 --> 00:04:33.010
either integers, strings,

83
00:04:33.010 --> 00:04:36.300
or a list.

84
00:04:36.300 --> 00:04:40.653
So, once again, we can do Union of int,

85
00:04:41.837 --> 00:04:44.240
str, or list.

86
00:04:44.240 --> 00:04:46.713
Remember this list is what we imported up here.

87
00:04:49.100 --> 00:04:51.000
We can go a level deeper, though

88
00:04:51.000 --> 00:04:53.823
because what is inside this list?

89
00:04:55.000 --> 00:04:57.430
Well, we've got item.jsons

90
00:04:58.500 --> 00:05:00.980
for each of the items in our database.

91
00:05:00.980 --> 00:05:03.110
Item.json we know

92
00:05:03.110 --> 00:05:07.900
returns this ItemJSON type hint.

93
00:05:07.900 --> 00:05:10.770
So we can actually have the list

94
00:05:10.770 --> 00:05:14.653
put another set of square brackets, and in it, put ItemJSON.

95
00:05:15.770 --> 00:05:19.480
Of course, that does mean we have to import ItemJSON,

96
00:05:19.480 --> 00:05:21.320
so we're gonna do that just up here

97
00:05:21.320 --> 00:05:25.393
from models.item import ItemJSON.

98
00:05:27.870 --> 00:05:28.930
There we have it.

99
00:05:28.930 --> 00:05:32.110
Now, we have complete information

100
00:05:32.110 --> 00:05:35.430
about what this store JSON is going to contain,

101
00:05:35.430 --> 00:05:37.840
a dictionary with strings as keys

102
00:05:37.840 --> 00:05:41.960
and either integers, strings, or a list of ItemJSONs

103
00:05:41.960 --> 00:05:42.943
as the value.

104
00:05:44.420 --> 00:05:47.373
We can of course, then, go ahead and return this.

105
00:05:48.720 --> 00:05:51.030
Okay, there we go.

106
00:05:51.030 --> 00:05:55.720
Now we can go over to our user model for the last change

107
00:05:55.720 --> 00:05:58.370
and once again, we're gonna import Union from up here

108
00:05:59.410 --> 00:06:01.360
and we're going to create our UserJSON

109
00:06:01.360 --> 00:06:05.780
which is gonna be a dict of strings to Union

110
00:06:05.780 --> 00:06:09.930
where that can contain either an integer or a string.

111
00:06:09.930 --> 00:06:13.010
So we're gonna put int and str here

112
00:06:13.010 --> 00:06:15.483
and we're gonna make this return a UserJSON.

113
00:06:17.830 --> 00:06:19.530
So the main purpose of this video,

114
00:06:19.530 --> 00:06:21.670
other than to add a bit of more

115
00:06:22.660 --> 00:06:25.470
concrete returns to our API,

116
00:06:25.470 --> 00:06:30.200
it's also to teach you about custom type hint values.

117
00:06:30.200 --> 00:06:31.830
So you can create these custom ones

118
00:06:31.830 --> 00:06:33.770
and you can use them one within the other

119
00:06:33.770 --> 00:06:34.680
and that's totally fine

120
00:06:34.680 --> 00:06:38.120
and it's gonna add just a bit more specificity to your APIs

121
00:06:38.120 --> 00:06:41.103
and to generally all your Python applications.

122
00:06:41.940 --> 00:06:44.840
So that's it for this video, I'll see you on the next one.

